ext.guessSdkDir = {
    def sdkDir = readLocalPropertiesValue("sdk.dir")
    if (sdkDir) {
        return sdkDir
    }

    [
            "/Applications/Android Studio.app/sdk",
            "/usr/local/opt/android-sdk", // brew --prefix android-sdk
            System.getenv("ANDROID_SDK"),
            System.getenv("ANDROID_HOME"),
    ].each { dir ->
        if (dir != null && file(dir).exists()) {
            sdkDir = dir
        }
    }
    return sdkDir
}

ext.guessNdkDir = {
    def ndkDir = readLocalPropertiesValue("ndk.dir")
    if (ndkDir) {
        return ndkDir
    }

    [
            "/usr/local/opt/android-ndk", // brew --prefix android-ndk
            System.getenv("ANDROID_NDK"),
    ].each { dir ->
        if (dir != null && file(dir).exists()) {
            ndkDir = dir
        }
    }
    return ndkDir
}

ext.readLocalPropertiesValue = { key ->
    File localPropFile = rootProject.file("local.properties")
    if (!localPropFile.exists()) {
        return ""
    }

    Properties properties = new Properties()
    def reader = localPropFile.newReader("UTF-8")
    try {
        properties.load(reader)
    } catch (IOException e) {
        throw new RuntimeException("Unable to read ${localPropFile}", e)
    } finally {
        reader.close()
    }

    return properties.getProperty(key)
}

ext.installRequiredSdk = { appExtension, sdkDir=readLocalPropertiesValue("sdk.dir") ->
    def compileSdkVersion = appExtension.compileSdkVersion
    def buildToolsRevision = appExtension.buildToolsRevision

    if (compileSdkVersion == null || buildToolsRevision == null) {
        throw new IllegalArgumentException("compileSdkVersion and buildToolsRevision must not be null")
    }

    if (!(sdkDir)) {
        throw new GradleException("sdkDir does not exist")
    }

    installSdkComponents(sdkDir, buildComponents(sdkDir, compileSdkVersion, buildToolsRevision))
}

ext.installAndroidSupportRepository = { sdkDir=readLocalPropertiesValue("sdk.dir") ->
    installSdkComponents(sdkDir, ["extra-android-m2repository"])
}

private void installSdkComponents(final String sdkDir, final List<String> components) {
    def workers = []
    def sdkToolsAndroidExecFilePath = findSdkToolsAndroidExecFile(sdkDir)

    if (components.size == 0) {
        return
    }
    runInstall(sdkToolsAndroidExecFilePath, components.join(","))
}

private def buildComponents(sdkDir, compileSdkVersion, buildToolsRevision) {
    def components = []

    def platformDir = "${sdkDir}/platforms/${compileSdkVersion}"
    if (!file(platformDir).exists()) {
        components.add("${compileSdkVersion}")
        println "[platform] ${platformDir} is not installed"
    }
    def buildToolDir = "${sdkDir}/build-tools/${buildToolsRevision}"
    if (!file(buildToolDir).exists()) {
        components.add("build-tools-${buildToolsRevision}")
        println "[build tools] ${buildToolDir} is not installed"
    }

    return components
}

private def runInstall(String sdkToolsAndroidExecFilePath, component) {
    def cmd = [
            sdkToolsAndroidExecFilePath,
            "update", "sdk",
            "--no-ui",
            "--all",
            "--filter", "${component}"]
    println "Execute: ${cmd.toString()}"
    def updateSdkProc = cmd.execute()
    updateSdkProc.withWriter { writer ->
        def is = updateSdkProc.in
        String lastLine = ""
        byte[] bytes = new byte[2048]
        ByteArrayOutputStream baos = new ByteArrayOutputStream()
        int length = 0
        while ((length = is.read(bytes)) >= 0) {
            def lf = 0x0A
            int lastLfIdx = -1
            for (int idx = length - 1; idx >= 0; --idx) {
                if (bytes[idx] == lf) {
                    lastLfIdx = idx
                    break
                }
            }
            if (lastLfIdx != -1) {
                baos.write(bytes, 0, lastLfIdx)
                String str = baos.toString("UTF-8")
                baos.reset()
                println str
                baos.write(bytes, lastLfIdx + 1, length - (lastLfIdx + 1))
            } else {
                baos.write(bytes, 0, length)
            }
            String str = baos.toString("UTF-8")
            if (str ==~ /Do you accept the license .*/) {
                writer << "y\n"
                writer.flush();
            }
        }
        String str = baos.toString("UTF-8")
        baos.reset()
        println str
    }
    updateSdkProc.waitFor()
}

private String findSdkToolsAndroidExecFile(String sdkDir) {
    // "android" for Linux and OS X, "android.bat" for Windows
    def fileNameCandidates = ["android", "android.bat"]
    for (def fileName : fileNameCandidates) {
        def candidateFilePath = "${sdkDir}/tools/${fileName}"
        if (file(candidateFilePath).exists()) {
            return candidateFilePath
        }
    }
    throw new RuntimeException("Executable file `android` not found")
}
